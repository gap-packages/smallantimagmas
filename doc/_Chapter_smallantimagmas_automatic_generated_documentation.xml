<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_smallantimagmas_automatic_generated_documentation">
<Heading>smallantimagmas automatic generated documentation</Heading>

<Section Label="Chapter_smallantimagmas_automatic_generated_documentation_Section_smallantimagmas_automatic_generated_documentation_of_properties">
<Heading>smallantimagmas automatic generated documentation of properties</Heading>

<ManSection>
  <Prop Arg="M" Name="IsAntiassociative" Label="for IsMagma"/>
 <Returns><K>true</K> or <K>false</K>
</Returns>
 <Description>
 identifies whether magma <A>M</A> is antiassociative.
<P/>
<Example><![CDATA[
gap> IsAntiassociative(OneSmallGroup(16));
false
gap> IsAntiassociative(OneSmallAntimagma(2));
true
gap> IsAntiassociative(OneSmallAntimagma(3));
true
]]></Example>


<P/>
 </Description>
</ManSection>


<ManSection>
  <Prop Arg="M" Name="IsLeftCyclic" Label="for IsMagma"/>
 <Returns><K>true</K> or <K>false</K>
</Returns>
 <Description>
  if magma is left cyclic <A>m</A>.
 </Description>
</ManSection>


<ManSection>
  <Prop Arg="M" Name="IsRightCyclic" Label="for IsMagma"/>
 <Returns><K>true</K> or <K>false</K>
</Returns>
 <Description>
  if magma is left cyclic <A>m</A>.
 </Description>
</ManSection>


<ManSection>
  <Prop Arg="M" Name="IsLeftCancellative" Label="for IsMagma"/>
 <Returns><K>true</K> or <K>false</K>
</Returns>
 <Description>
  if magma is left cancellative <A>m</A>.
<P/>
<Example><![CDATA[
gap> M := SmallAntimagma(2, 1);
<magma with 2 generators>
gap> Display( MultiplicationTable(M) );
[ [  2,  1 ],
  [  2,  1 ] ]
gap> IsRightCancellative(M);
false
gap> IsLeftCancellative(M);
true
gap> List(AllSmallAntimagmas(2), M -> IsLeftCancellative(M));
[ true, false ]
]]></Example>


<P/>
 </Description>
</ManSection>


<ManSection>
  <Prop Arg="M" Name="IsRightCancellative" Label="for IsMagma"/>
 <Returns><K>true</K> or <K>false</K>
</Returns>
 <Description>
  if magma is right cancellative <A>m</A>.
<P/>
<Example><![CDATA[
gap> List(AllSmallAntimagmas(2), M -> IsRightCancellative(M));
[ false, true ]
]]></Example>


<P/>
 </Description>
</ManSection>


<ManSection>
  <Prop Arg="M" Name="IsCancellative" Label="for IsMagma"/>
 <Returns><K>true</K> or <K>false</K>
</Returns>
 <Description>
 if magma is cancellative <A>m</A>.
<P/>
<Example><![CDATA[
gap> List(AllSmallAntimagmas(2), M -> IsCancellative(M));
[ false, false ]
]]></Example>


<P/>
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_smallantimagmas_automatic_generated_documentation_Section_smallantimagmas_automatic_generated_documentation_of_attributes">
<Heading>smallantimagmas automatic generated documentation of attributes</Heading>

<ManSection>
  <Attr Arg="M" Name="AssociativityIndex" Label="for IsMagma"/>
 <Description>
 identifies associativity index of <A>M</A>.
<P/>
<Example><![CDATA[
gap> OneSmallAntimagma(2);
<magma with 2 generators>
gap> AssociativityIndex(OneSmallAntimagma(2));
0
gap> OneSmallGroup(4);
<pc group of size 4 with 2 generators>
gap> AssociativityIndex(OneSmallGroup(4));
64
gap> AssociativityIndex(OneSmallGroup(4)) = 4 ^ 3;
true
]]></Example>


<P/>
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="M" Name="DiagonalOfMultiplicationTable" Label="for IsMagma"/>
 <Description>
 computes diaognal of multiplication table of <A>M</A>.
<P/>
<Example><![CDATA[
gap> List(AllSmallAntimagmas(3), M -> DiagonalOfMultiplicationTable((M)));                
[ [ 2, 1, 1 ], [ 2, 1, 1 ], 
  [ 2, 3, 2 ], [ 2, 1, 1 ], 
  [ 2, 1, 1 ], [ 2, 1, 2 ], 
  [ 2, 3, 2 ], [ 2, 1, 2 ], 
  [ 2, 3, 1 ], [ 2, 3, 1 ]
]
]]></Example>


<P/>
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="M" Name="CommutativityIndex" Label="for IsMagma"/>
 <Description>
 identifies commutativity index of <A>M</A>.
<P/>
<Example><![CDATA[

]]></Example>


<P/>
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="M" Name="AnticommutativityIndex" Label="for IsMagma"/>
 <Description>
 calculates anticommutativity index of <A>M</A>.
<P/>
<Example><![CDATA[
]]></Example>


<P/>
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="M" Name="SquaresIndex" Label="for IsMagma"/>
 <Description>
 computes squares index of <A>M</A> so the order of <Math>\left\{ m^2 | m \in M \right\}</Math>.
<P/>
<Example><![CDATA[
gap> List(AllSmallAntimagmas(2), M -> List(M, m -> m * m) );                
[ [ m2, m1 ], [ m2, m1 ] ]
gap> List(AllSmallAntimagmas(2), M -> SquaresIndex(M ));
[ 2, 2 ]
gap> List(AllSmallAntimagmas(3), M -> SquaresIndex(M ));
[ 2, 2, 2, 2, 2, 2, 2, 2, 3, 3 ]
]]></Example>


<P/>
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="M" Name="IdSmallAntimagma" Label="for IsMagma"/>
 <Description>
 identifies class of antiassociative magma <A>M</A>.
<P/>
<Example><![CDATA[
gap> IsAntiassociative(OneSmallGroup(16));
false
gap> IsAntiassociative(OneSmallAntimagma(2));
true
gap> IsAntiassociative(OneSmallAntimagma(3));
true
]]></Example>


<P/>
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="[m]" Name="LeftOrder" Label="for IsExtLElement"/>
 <Description>
 returns a left order of element <A>m</A>.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="[m]" Name="RightOrder" Label="for IsExtRElement"/>
 <Description>
  returns a right order of element <A>m</A>.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="[m]" Name="LeftOrdersOfElements" Label="for IsMagma"/>
 <Description>
 returns a left order of element <A>m</A>.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="[m]" Name="RightOrdersOfElements" Label="for IsMagma"/>
 <Description>
 returns a left order of element <A>m</A>.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_smallantimagmas_automatic_generated_documentation_Section_smallantimagmas_automatic_generated_documentation_of_global_functions">
<Heading>smallantimagmas automatic generated documentation of global functions</Heading>

<ManSection>
  <Func Arg="M" Name="AllSubmagmas" />
 <Description>
 builds a collection of non-isomorphic submagmas of <A>M</A>.
<P/>
<Example><![CDATA[
gap> AllSmallAntimagmas(2);
[ <magma with 2 generators>, <magma with 2 generators> ]
gap> List(AllSmallAntimagmas(2), M -> AllSubmagmas(M));
[ [ <magma with 1 generator> ], [ <magma with 1 generator> ] ]
]]></Example>


<P/>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="M" Name="MagmaIsomorphismInvariantsMatch" />
 <Description>
 computes isomorphism invariants of <A>M</A>.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="M, N" Name="IsMagmaIsomorphic" />
 <Description>
  identifies whether magmas <A>M</A>, <A>N</A> are isomorphic.
<P/>
<Example><![CDATA[
gap> M := SmallAntimagma(2, 1);
<magma with 2 generators>
gap> N := SmallAntimagma(2, 2);
<magma with 2 generators>
gap> T := MagmaByMultiplicationTable([ [2, 1], [2, 1] ]);
<magma with 2 generators>
gap> IsMagmaIsomorphic(M, M);
true
gap> IsMagmaIsomorphic(M, T);
true
gap> IsMagmaIsomorphic(M, N);
false
]]></Example>


<P/>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="[M, N]" Name="IsMagmaAntiisomorphic" />
 <Description>
 identifies whether magmas <A>M</A>, <A>N</A> are antiisomorphic.
<P/>
<Example><![CDATA[
gap> N := SmallAntimagma(2, 1);
<magma with 2 generators>
gap> M := SmallAntimagma(2, 1);
<magma with 2 generators>
gap> N := SmallAntimagma(2, 2);
<magma with 2 generators>
gap> IsMagmaAntiisomorphic(M, M);
false
gap> IsMagmaAntiisomorphic(M, N);
true
gap> IsMagmaAntiisomorphic(M, TransposedMagma(M));
true
]]></Example>


<P/>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="[M]" Name="TransposedMagma" />
 <Description>
 generates transposed magma <A>M</A>.
<P/>
<Example><![CDATA[
gap> M := SmallAntimagma(2, 1);
<magma with 2 generators>
gap> IsMagmaAntiisomorphic(M, TransposedMagma(M));
true
gap> IsMagmaIsomorphic(M, TransposedMagma(TransposedMagma(M)));
true
gap> M := SmallAntimagma(2, 1);
<magma with 2 generators>
gap> Display(MultiplicationTable(M));
[ [  2,  1 ],
  [  2,  1 ] ]
gap> Display(MultiplicationTable(TransposedMagma(M)));
[ [  2,  2 ],
  [  1,  1 ] ]
]]></Example>


<P/>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="[m, k]" Name="LeftPower" />
 <Description>
 returns a left <Math>k</Math>-power of element <A>m</A>.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="[m, k]" Name="RightPower" />
 <Description>
  returns a right <Math>k</Math>-power of element <A>m</A>.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="n" Name="AllSmallAntimagmas" />
 <Description>
 returns all antiassociative magmas of specified size <A>n</A> (a number)
<P/>
<Example><![CDATA[
gap> AllSmallAntimagmas(2);
[ <magma with 2 generators>, <magma with 2 generators> ]
gap> AllSmallAntimagmas(3);
[ 
  <magma with 3 generators>, <magma with 3 generators>, <magma with 3 generators>,
  <magma with 3 generators>, <magma with 3 generators>, <magma with 3 generators>,
  <magma with 3 generators>, <magma with 3 generators>,
  <magma with 3 generators>, <magma with 3 generators>
]
]]></Example>


<P/>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="n" Name="NrSmallAntimagmas" />
 <Description>
 counts number of antiassociative magmas of specified size <A>n</A> (a number).
<P/>
<Example><![CDATA[
gap> NrSmallAntimagmas(2);
2
gap> NrSmallAntimagmas(3);
10
gap> NrSmallAntimagmas(4);
17780
]]></Example>


<P/>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="n, i" Name="SmallAntimagma" />
 <Description>
 returns antiassociative magma of id <A>[n, i]</A>.
<P/>
<Example><![CDATA[
gap> SmallAntimagma(2, 1);
<magma with 2 generators>
gap> SmallAntimagma(4, 5);
<magma with 4 generators>
]]></Example>


<P/>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="n" Name="OneSmallAntimagma" />
 <Description>
 returns a random antiassociative magma of size <A>n</A>.
<P/>
<Example><![CDATA[
gap> OneSmallAntimagma(2);
<magma with 2 generators>

gap> OneSmallAntimagma(3);
<magma with 3 generators>
]]></Example>


<P/>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="n" Name="ReallyAllSmallAntimagmas" />
 <Description>
 returns really-all antiassociative magmas, isomorphic, of specified size <A>n</A> (a number)
<P/>
<Example><![CDATA[
gap> ReallyAllSmallAntimagmas(2);
[ <magma with 2 generators>, <magma with 2 generators> ]
]]></Example>


<P/>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="n" Name="ReallyNrSmallAntimagmas" />
 <Description>
 counts number of antiassociative magmas of specified size <A>n</A> (a number) 
<P/>
<Example><![CDATA[
gap> ReallyNrSmallAntimagmas(3);
52
]]></Example>


<P/>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="n" Name="AntimagmaGeneratorPossibleDiagonals" />
 <Description>
 returns all possible diagonals of multiplication table for <A>[n]</A>-antimagma.
<P/>
<Example><![CDATA[
gap> AntimagmaGeneratorPossibleDiagonals(2);
[ [ 2, 1 ] ]
gap> AntimagmaGeneratorPossibleDiagonals(3);
[ 
  [ 2, 1, 1 ], [ 2, 1, 2 ], [ 2, 3, 1 ], [ 2, 3, 2 ], 
  [ 3, 1, 1 ], [ 3, 1, 2 ], [ 3, 3, 1 ], [ 3, 3, 2 ] 
]
]]></Example>


<P/>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="Ms" Name="AntimagmaGeneratorFilterNonIsomorphicMagmas" />
 <Description>
 filters non-isomorphic magmas <A>m</A>.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_smallantimagmas_automatic_generated_documentation_Section_smallantimagmas_automatic_generated_documentation_of_methods">
<Heading>smallantimagmas automatic generated documentation of methods</Heading>

<ManSection>
  <Oper Arg="M, N" Name="MagmaIsomorphism" Label="for IsMagma, IsMagma"/>
 <Description>
 computes an isomoprhism between magmas <A>M</A>, <A>N</A>.
<P/>
<Example><![CDATA[
gap> M := SmallAntimagma(2, 1);
<magma with 2 generators>
gap> N := MagmaByMultiplicationTable([ [2, 1], [2, 1] ]);
<magma with 2 generators>
gap> MagmaIsomorphism(M, N);
<mapping: Domain([ m1, m2 ]) -> Domain([ m1, m2 ]) >
]]></Example>


<P/>
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="M, N" Name="MagmaAntiisomorphism" Label="for IsMagma, IsMagma"/>
 <Description>
  creates an antiisomoprhism between magmas <A>M</A>, <A>N</A>.
<P/>
<Example><![CDATA[
gap> M := SmallAntimagma(2, 1);
<magma with 2 generators>
gap> N := SmallAntimagma(2, 2);
<magma with 2 generators>
gap> MagmaAntiisomorphism(M, N);
<mapping: Domain([ m1, m2 ]) -> Domain([ m1, m2 ]) >
]]></Example>


<P/>
 </Description>
</ManSection>


</Section>


</Chapter>

